import type { Logger as WinstonLogger } from 'winston';
export type LogLevel = 'error' | 'warn' | 'info' | 'http' | 'verbose' | 'debug' | 'silly';
interface LoggerOptions {
    level?: LogLevel;
    console?: boolean;
    file?: string;
    format?: 'minimal' | 'detailed' | 'emoji';
}
declare class SimpleConsoleLogger {
    private _level;
    private name;
    constructor(name?: string, level?: LogLevel);
    private shouldLog;
    private formatMessage;
    error(message: string): void;
    warn(message: string): void;
    info(message: string): void;
    debug(message: string): void;
    http(message: string): void;
    verbose(message: string): void;
    silly(message: string): void;
    get level(): LogLevel;
    set level(newLevel: LogLevel);
}
export declare class Logger {
    private static instances;
    private static simpleInstances;
    private static currentFormat;
    static get(name?: string): WinstonLogger | SimpleConsoleLogger;
    private static getFormatter;
    static configure(options?: LoggerOptions): Promise<void>;
    static setDebug(enabled: boolean | 0 | 1 | 2): void;
    static setFormat(format: 'minimal' | 'detailed' | 'emoji'): void;
}
export declare const logger: SimpleConsoleLogger | WinstonLogger;
export {};
//# sourceMappingURL=logging.d.ts.map