export declare abstract class BaseTelemetryEvent {
    abstract get name(): string;
    abstract get properties(): Record<string, any>;
}
export interface MCPAgentExecutionEventData {
    executionMethod: string;
    query: string;
    success: boolean;
    modelProvider: string;
    modelName: string;
    serverCount: number;
    serverIdentifiers: Array<Record<string, string>>;
    totalToolsAvailable: number;
    toolsAvailableNames: string[];
    maxStepsConfigured: number;
    memoryEnabled: boolean;
    useServerManager: boolean;
    maxStepsUsed: number | null;
    manageConnector: boolean;
    externalHistoryUsed: boolean;
    stepsTaken?: number | null;
    toolsUsedCount?: number | null;
    toolsUsedNames?: string[] | null;
    response?: string | null;
    executionTimeMs?: number | null;
    errorType?: string | null;
    conversationHistoryLength?: number | null;
}
export declare class MCPAgentExecutionEvent extends BaseTelemetryEvent {
    private data;
    constructor(data: MCPAgentExecutionEventData);
    get name(): string;
    get properties(): Record<string, any>;
}
//# sourceMappingURL=events.d.ts.map