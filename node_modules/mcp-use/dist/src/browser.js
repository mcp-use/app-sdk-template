import {
  BaseAdapter,
  BaseConnector,
  BaseMCPClient,
  HttpConnector,
  LangChainAdapter,
  MCPAgent,
  MCPSession,
  ObservabilityManager,
  RemoteAgent,
  WebSocketConnector,
  createReadableStreamFromGenerator,
  streamEventsToAISDK,
  streamEventsToAISDKWithTools
} from "../chunk-4SWVHFJH.js";
import {
  BrowserOAuthClientProvider,
  onMcpAuthorization
} from "../chunk-62GFHYCL.js";
import {
  Logger,
  logger
} from "../chunk-2HFIPY7C.js";
import {
  __name
} from "../chunk-SHUYVCID.js";

// src/client/browser.ts
var BrowserMCPClient = class _BrowserMCPClient extends BaseMCPClient {
  static {
    __name(this, "BrowserMCPClient");
  }
  constructor(config) {
    super(config);
  }
  static fromDict(cfg) {
    return new _BrowserMCPClient(cfg);
  }
  /**
   * Create a connector from server configuration (Browser version)
   * Supports HTTP and WebSocket connectors only
   */
  createConnectorFromConfig(serverConfig) {
    const { url, transport, headers, authToken } = serverConfig;
    if (!url) {
      throw new Error("Server URL is required");
    }
    const connectorOptions = {
      headers,
      authToken
    };
    if (transport === "websocket" || url.startsWith("ws://") || url.startsWith("wss://")) {
      return new WebSocketConnector(url, connectorOptions);
    } else if (transport === "http" || url.startsWith("http://") || url.startsWith("https://")) {
      return new HttpConnector(url, connectorOptions);
    } else {
      return new HttpConnector(url, connectorOptions);
    }
  }
};

// src/browser.ts
import { AIMessage, BaseMessage, HumanMessage, SystemMessage, ToolMessage } from "@langchain/core/messages";
export {
  AIMessage,
  BaseAdapter,
  BaseConnector,
  BaseMessage,
  BrowserOAuthClientProvider,
  HttpConnector,
  HumanMessage,
  LangChainAdapter,
  Logger,
  MCPAgent,
  BrowserMCPClient as MCPClient,
  MCPSession,
  ObservabilityManager,
  RemoteAgent,
  SystemMessage,
  ToolMessage,
  WebSocketConnector,
  createReadableStreamFromGenerator,
  logger,
  onMcpAuthorization,
  streamEventsToAISDK,
  streamEventsToAISDKWithTools
};
